name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test and Coverage
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: obtura_test
          POSTGRES_PASSWORD: obtura_test
          POSTGRES_DB: obtura_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: Install dependencies
      run: |
        go mod download
        go mod verify

    - name: Install gotestsum
      run: go install gotest.tools/gotestsum@latest

    - name: Run tests
      run: |
        gotestsum --junitfile report.xml --format pkgname-and-test-fails -- \
          -race -coverprofile=coverage.out -covermode=atomic ./...
      env:
        DB_DRIVER: sqlite
        SQLITE_PATH: ":memory:"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: report.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Generate coverage report
      run: |
        go tool cover -func=coverage.out
        go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage HTML
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.html

    - name: Check coverage threshold
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep '^total:' | awk '{print $3}' | sed 's/%//')
        echo "Total coverage: $COVERAGE%"
        THRESHOLD=70.0
        if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
          echo "Coverage is below threshold of $THRESHOLD%"
          exit 1
        fi

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: Build
      run: |
        GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} \
          go build -v -o dist/obtura-${{ matrix.os }}-${{ matrix.arch }} ./cmd/obtura

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: obtura-${{ matrix.os }}-${{ matrix.arch }}
        path: dist/obtura-${{ matrix.os }}-${{ matrix.arch }}