package adminpages

import (
	"fmt"
	"github.com/btassone/obtura/internal/models"
	"github.com/btassone/obtura/pkg/plugin"
	"github.com/btassone/obtura/web/templates/admin/layout"
)

templ PluginConfig(user *models.User, pluginInfo plugin.Plugin, schema *plugin.ConfigSchema, currentConfig map[string]interface{}) {
	@adminlayout.AdminBase("Plugin Configuration", user) {
		<div class="mb-8">
			<div class="flex items-center">
				<a href="/admin/plugins" class="text-gray-500 hover:text-gray-700 mr-4">
					<svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
					</svg>
				</a>
				<h1 class="text-2xl font-semibold text-gray-900">{ pluginInfo.Name() } Configuration</h1>
			</div>
			<p class="mt-1 text-sm text-gray-600">{ pluginInfo.Description() }</p>
		</div>

		<div class="bg-white shadow sm:rounded-lg">
			<form method="POST" action={ templ.SafeURL("/admin/plugins/" + pluginInfo.ID() + "/config") } class="px-6 py-4">
				if schema != nil && len(schema.Fields) > 0 {
					<div class="space-y-6">
						for _, field := range schema.Fields {
							@ConfigField(field, currentConfig[field.Name])
						}
					</div>
					
					<div class="mt-6 flex justify-end">
						<button type="button" 
							onclick="window.location.href='/admin/plugins'"
							class="bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
							Cancel
						</button>
						<button type="submit" 
							class="ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
							Save Configuration
						</button>
					</div>
				} else {
					<p class="text-gray-500">This plugin has no configurable options.</p>
				}
			</form>
		</div>
	}
}

templ ConfigField(field plugin.ConfigField, currentValue interface{}) {
	<div>
		<label for={ field.Name } class="block text-sm font-medium text-gray-700">
			{ field.Label }
			if field.Required {
				<span class="text-red-500">*</span>
			}
		</label>
		if field.Description != "" {
			<p class="mt-1 text-sm text-gray-500">{ field.Description }</p>
		}
		<div class="mt-1">
			switch field.Type {
			case "string":
				<input type="text" 
					name={ field.Name } 
					id={ field.Name }
					value={ toString(currentValue, field.Default) }
					class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md"
					if field.Required { required }/>
			
			case "number":
				<input type="number" 
					name={ field.Name } 
					id={ field.Name }
					value={ toString(currentValue, field.Default) }
					class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md"
					if field.Required { required }/>
			
			case "boolean":
				<div class="flex items-center">
					<input type="checkbox" 
						name={ field.Name } 
						id={ field.Name }
						if toBool(currentValue, field.Default) { checked }
						class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"/>
				</div>
			
			case "select":
				<select name={ field.Name } 
					id={ field.Name }
					class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"
					if field.Required { required }>
					for _, option := range field.Options {
						<option value={ option.Value } 
							if toString(currentValue, field.Default) == option.Value { selected }>
							{ option.Label }
						</option>
					}
				</select>
			
			case "multiselect":
				<select name={ field.Name } 
					id={ field.Name }
					multiple
					class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"
					if field.Required { required }>
					for _, option := range field.Options {
						<option value={ option.Value }>
							{ option.Label }
						</option>
					}
				</select>
			
			default:
				<input type="text" 
					name={ field.Name } 
					id={ field.Name }
					value={ toString(currentValue, field.Default) }
					class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md"/>
			}
		</div>
	</div>
}

// Helper functions
func toString(value interface{}, defaultValue interface{}) string {
	if value != nil {
		return fmt.Sprintf("%v", value)
	}
	if defaultValue != nil {
		return fmt.Sprintf("%v", defaultValue)
	}
	return ""
}

func toBool(value interface{}, defaultValue interface{}) bool {
	if b, ok := value.(bool); ok {
		return b
	}
	if value != nil {
		return fmt.Sprintf("%v", value) == "true"
	}
	if b, ok := defaultValue.(bool); ok {
		return b
	}
	return false
}